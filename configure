#!/usr/bin/env sh

#**
#* @file    configure
#* @brief   Configuration script
#* @version 0.1
#* @date    23.11.2014.
#*
#* @author Armands Skolmeisters  (Arseniuss) <arseniuss@arseniuss.id.lv>
#* @copyright see file LICENSE
#*

# Exit if error
set -e

PROGNAME=${0##*/} 

VERSION='1.0'
force=0

host='unknown'
arch='unknown'
features=''

supported_arch='x86'
supported_features=''

feature_debug=0						# Without debug extensions by default
feature_multiboot=1 				# Multiboot esabled by default

core=1								# Create configuration for building core
core_dir=core						# Path to core

# Cross compiler
cc_tools="gcc objdump ar as cpp ld"
cc_dir=
cc_prefix=

# Assembler
as_dir=

# Usage info
usage() {
cat << EOF
Usage: ${PROGNAME} [OPTIONS]
Options:
	--arch=<arch>		specify target architecture
	--assembler=<path>	specity path to nasm assembler
	--core-dir=<path>	specify core directory
	--cross-compiler=<path>	path cross compiler
	--cross-compiler-prefix=<prefix> prefix before cross compiler tools
	--debug				create debuggable target configuration
	--force 			forces rewritting of configuration
	--help | -h			prints this help
	--multiboot			add multiboot support in core (enabled by default)
	--no-core			do not create configuration for core
	--no-multiboot		remove multiboot support from core
	--usage				prints this help
	--version | -v 		prints version
EOF
}

for i in "$@"; do 
    case $i in
    --force)
    	echo "Warning: forcing configuration creation!"
        force=1
        ;;
   	--debug)
   		echo "Warning: creating configuration for debuggable target"
   		feature_debug=1
   		;;
   	--multiboot)
   		#echo "Warning: using multiboot!"
   		feature_multiboot=1
   		;;
   	--no-multiboot)
   		echo "WARNING: creating configuration without multiboot support!"
   		feature_multiboot=0
   		;;
   	--no-core)
   		echo "WARNING: this configuration file is not usable for core building!"
   		core=0
   		;;
   	--arch=*)
   		arch="${i#*=}"
   		#echo "Warning: target architecture is specified! ($arch)"
   		;;
   	--core-dir=*)
   		core=1
   		core_dir="${i#*=}"
   		;;
   	--help|--usage|-h)
   		usage
   		exit 0
   		;;
   	--version|-v)
   		echo "/flos/ build configuration script v$VERSION";
   		exit 0
   		;;
   	--cross-compiler=*|--cc=*)
   		cc_dir="${i#*=}"
   		;;
   	--cross-compiler-prefix=*|--cc-prefix=*|--ccp=*)
   		cc_prefix="${i#*=}"
   		;;
   	--assembler=*|--as=*)
   		as_dir="${i#*=}"
   		;;
    *)
    	echo "Error: unknown argument '$i'"
    	usage
    	exit 1
        ;;
    esac
done

if [ -f config.mk ] && [ "$force" -eq 0 ]; then
    echo "Configuration file 'config.mk' exists"
    echo "Use --force to force rewrite"
    exit 1
fi

# Detecting host platform
unamestr=`uname`
if [ $unamestr = 'Linux' ]; then
	host='linux'
else
	echo "Error: Unknown host"
	echo "Configuration script don't know how to create build configuration in this OS"
	exit 1
fi

# Getting needed parameters to build target on host machine
case "$host" in
	'linux')
		# Detect architecture
		if [ "$arch" = 'unknown' ]; then
			linux_arch=`uname -m`
			case "$linux_arch" in
				'i386')
					arch='x86'
					;;
				*)
					echo "Error: unknown or unsupported Linux architecture type '$linux_arch'"
					echo "Use --arch=<arch> to set target architecture!"
					exit 1
					;;
			esac
		# Check if architecture is supported
		else
			if [ "$supported_arch" = "$(echo $supported_arch | sed s/$arch//)" ]; then 
				echo "Error: architecture '$arch' is not supported"
				exit 1
			fi
		fi
		;;
esac

if [ ! -d "$core_dir" ] && [ "$core" -eq 1 ]; then
	echo "Error: cannot create configuration for core"
	echo "Directory $core_dir do not exist"
	exit 1
fi
		
# Setting feature list
case "$arch" in
	"x86")
		supported_features='DEBUG MULTIBOOT'
		
		if [ $feature_debug -eq 1 ]; then features="$features DEBUG"; fi
		if [ $feature_multiboot -eq 1 ] && [ $core -eq 1 ]; then features="$features MULTIBOOT"; fi
	;;
esac

# Checking cross compiler
if [ "$cc_dir" ]; then
	if [ ! -d "$cc_dir" ]; then
		echo "Error: cross compiler directory '$cc_dir' do not exist"
		exit 1
	fi
	
	# Checking if all tools are available
	for i in $cc_tools; do
		tool="$cc_dir/bin/${cc_prefix}${i}"
		if [ ! -f  $tool ]; then
			echo "Error: cross compiler tool '$tool' not found"
			exit 1
		fi
	done
fi

cat <<EOF > config.mk
#**
#* @file    config.mk
#* @brief   Project configuration file (format: makefile)
#* @date    `date +"%d.%m.%Y."`
#*
#* @author  Configuration script: `echo $0`
#*

#
# WARNING: THIS IS AUTOGENERATED FILE BY CONFIGURE SCRIPT. EDIT ON YOUR OWN RISK!
#

#
# Architecture
#	Supported: ${supported_arch}
#
arch = $arch

#
# Features:
#	Supported: ${supported_features}
#
features = $features

EOF

if [ "$core_dir" ]; then
	cat <<EOF >> config.mk
#
# Cross compiler
#
AR = $(readlink -f $cc_dir)/bin/${cc_prefix}ar
CC = $(readlink -f $cc_dir)/bin/${cc_prefix}gcc
CPP = $(readlink -f $cc_dir)/bin/${cc_prefix}g++
DUMP = $(readlink -f $cc_dir)/bin/${cc_prefix}objdump
LD = $(readlink -f $cc_dir)/bin/${cc_prefix}ld
PP = $(readlink -f $cc_dir)/bin/${cc_prefix}cpp

EOF
fi

if [ "$as_dir" ]; then
	cat <<EOF >>config.mk
#
# Assembler
#	
ASM = $(readlink -f $as_dir)/nasm
EOF
fi

# Creating symbolic link to core directory
if [ $core -eq 1 ]; then
	ln -sfv `pwd`/config.mk "$core_dir/config.mk"
fi

